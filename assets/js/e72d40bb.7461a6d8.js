"use strict";(self.webpackChunkdsa_study_guide=self.webpackChunkdsa_study_guide||[]).push([[925],{6339:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"algorithms/two-pointers","title":"Two Pointers","description":"Understanding two pointers algorithm","source":"@site/docs/algorithms/two-pointers.mdx","sourceDirName":"algorithms","slug":"/algorithms/two-pointers","permalink":"/docs/algorithms/two-pointers","draft":false,"unlisted":false,"editUrl":"https://github.com/LuluBeatson/dsa-study-guide/tree/main/docs/algorithms/two-pointers.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Two Pointers","description":"Understanding two pointers algorithm"},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/docs/algorithms/overview"},"next":{"title":"Sliding Window","permalink":"/docs/algorithms/sliding-window"}}');var i=n(4848),a=n(8453),r=n(5537),l=n(9329);n(8069);const o={sidebar_position:1,title:"Two Pointers",description:"Understanding two pointers algorithm"},c="Two Pointers",d={},h=[{value:"Implementation",id:"implementation",level:2}];function m(e){const s={annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"two-pointers",children:"Two Pointers"})}),"\n",(0,i.jsx)(s.p,{children:"The two pointers algorithm is used to solve problems that involve finding a specific element or a range of elements in an array."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Time Complexity:"})," ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"O"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"n"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(s.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Space Complexity:"})," ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"O"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mn,{children:"1"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord",children:"1"}),(0,i.jsx)(s.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,i.jsx)(s.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsxs)(r.A,{children:[(0,i.jsx)(l.A,{value:"py",label:"Python",children:(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"def two_pointers(arr):\n    left, right = 0, len(arr) - 1\n    result = 0\n    while left < right:\n        # Process elements at left and right pointers\n        # Move pointers based on condition\n        if condition:\n            left += 1\n        else:\n            right -= 1\n    return result\n"})})}),(0,i.jsx)(l.A,{value:"go",label:"Golang",children:(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-go",children:'func twoPointers(arr []int) int {\n    left, right := 0, len(arr)-1\n    result := 0\n    for left < right {  // Golang\'s "WHILE" is written as "FOR"\n        // Process elements at left and right pointers\n        // Move pointers based on condition\n        if condition {\n            left++\n        } else {\n            right--\n        }\n    }\n    return result\n}\n'})})})]})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}}}]);