"use strict";(self.webpackChunkdsa_study_guide=self.webpackChunkdsa_study_guide||[]).push([[752],{4845:(i,n,e)=>{e.r(n),e.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>g});const t=JSON.parse('{"id":"algorithms/sliding-window","title":"Sliding Window","description":"Understanding sliding window algorithm","source":"@site/docs/algorithms/sliding-window.mdx","sourceDirName":"algorithms","slug":"/algorithms/sliding-window","permalink":"/docs/algorithms/sliding-window","draft":false,"unlisted":false,"editUrl":"https://github.com/LuluBeatson/dsa-study-guide/tree/main/docs/algorithms/sliding-window.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Sliding Window","description":"Understanding sliding window algorithm"},"sidebar":"tutorialSidebar","previous":{"title":"Two Pointers","permalink":"/docs/algorithms/two-pointers"},"next":{"title":"Binary Search","permalink":"/docs/algorithms/binary-search"}}');var r=e(4848),s=e(8453),o=e(5537),d=e(9329);e(8069);const l={sidebar_position:2,title:"Sliding Window",description:"Understanding sliding window algorithm"},a="Sliding Window",h={},g=[{value:"Implementation",id:"implementation",level:2}];function m(i){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...i.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"sliding-window",children:"Sliding Window"})}),"\n",(0,r.jsx)(n.p,{children:"The sliding window algorithm is used to solve problems that involve finding the maximum or minimum sum of a subarray of a given size. It is very similar to the two pointers algorithm."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Time Complexity:"})," O(n)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Space Complexity:"})," O(k), where k is the size of the window"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsx)(d.A,{value:"py",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def sliding_window(arr):\n    left = right = 0\n    window = {}\n    result = 0\n    while right < len(arr):\n        # Add element at right to window\n        # Process window\n        while condition:\n            # Remove element at left from window\n            left += 1\n        # Update result\n        right += 1\n    return result\n"})})}),(0,r.jsx)(d.A,{value:"ts",label:"Golang",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func slidingWindow(arr []int) int {\n    left, right := 0, 0\n    window := make(map[int]int)\n    result := 0\n    for right < len(arr) {\n        // Add element at right to window\n        // Process window\n        for condition {\n            // Remove element at left from window\n            left += 1\n        // Update result\n        right += 1\n    }\n    return result\n}\n"})})})]})]})}function c(i={}){const{wrapper:n}={...(0,s.R)(),...i.components};return n?(0,r.jsx)(n,{...i,children:(0,r.jsx)(m,{...i})}):m(i)}}}]);