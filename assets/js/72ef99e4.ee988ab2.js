"use strict";(self.webpackChunkdsa_study_guide=self.webpackChunkdsa_study_guide||[]).push([[752],{4845:(s,e,n)=>{n.r(e),n.d(e,{assets:()=>m,contentTitle:()=>o,default:()=>x,frontMatter:()=>d,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"algorithms/sliding-window","title":"Sliding Window (Fixed)","description":"Understanding sliding window algorithm","source":"@site/docs/algorithms/sliding-window.mdx","sourceDirName":"algorithms","slug":"/algorithms/sliding-window","permalink":"/docs/algorithms/sliding-window","draft":false,"unlisted":false,"editUrl":"https://github.com/LuluBeatson/dsa-study-guide/edit/main/docs/algorithms/sliding-window.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Sliding Window (Fixed)","description":"Understanding sliding window algorithm"},"sidebar":"tutorialSidebar","previous":{"title":"Two Pointers","permalink":"/docs/algorithms/two-pointers"},"next":{"title":"Sliding Window (Dynamic)","permalink":"/docs/algorithms/sliding-window-dynamic"}}');var a=n(4848),r=n(8453),l=n(5537),t=n(9329);n(8069);const d={sidebar_position:2,title:"Sliding Window (Fixed)",description:"Understanding sliding window algorithm"},o="Sliding Window (Fixed Size)",m={},h=[{value:"Template",id:"template",level:2},{value:"Example: Maximum Sum of Subarray of Size K",id:"example-maximum-sum-of-subarray-of-size-k",level:2}];function c(s){const e={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,r.R)(),...s.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"sliding-window-fixed-size",children:"Sliding Window (Fixed Size)"})}),"\n",(0,a.jsxs)(e.p,{children:["The sliding window algorithm is used to solve problems that involve finding the maximum or minimum sum of a subarray of a ",(0,a.jsx)(e.strong,{children:"fixed"})," size. It is very similar to the ",(0,a.jsx)(e.a,{href:"/docs/algorithms/two-pointers",children:"Two Pointers"})," algorithm."]}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Time Complexity:"})," ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mi,{children:"O"}),(0,a.jsx)(e.mo,{stretchy:"false",children:"("}),(0,a.jsx)(e.mi,{children:"n"}),(0,a.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(n)"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,a.jsx)(e.span,{className:"mopen",children:"("}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(e.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Space Complexity:"})," ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mi,{children:"O"}),(0,a.jsx)(e.mo,{stretchy:"false",children:"("}),(0,a.jsx)(e.mi,{children:"k"}),(0,a.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"O(k)"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,a.jsx)(e.span,{className:"mopen",children:"("}),(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"}),(0,a.jsx)(e.span,{className:"mclose",children:")"})]})})]}),", where ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsx)(e.mi,{children:"k"})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"k"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.6944em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]})," is the size of the window"]}),"\n",(0,a.jsx)(e.h2,{id:"template",children:"Template"}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(t.A,{value:"py",label:"Python",children:(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"def sliding_window(arr: list, k: int) -> int:\n    window = None\n    result = None\n\n    for right in range(k, len(arr)):\n        # Process window\n        window = ...\n\n        # Update result\n        result = ...\n\n    return result\n"})})})}),"\n",(0,a.jsx)(e.h2,{id:"example-maximum-sum-of-subarray-of-size-k",children:"Example: Maximum Sum of Subarray of Size K"}),"\n",(0,a.jsxs)(e.p,{children:["Here's an example of finding the maximum sum of a subarray of size ",(0,a.jsx)(e.code,{children:"k"})," using the sliding window technique."]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"window"})," is the sum of the current window"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"result"})," is the maximum sum of the subarray"]}),"\n"]}),"\n",(0,a.jsx)(l.A,{children:(0,a.jsx)(t.A,{value:"py",label:"Python",children:(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"def max_sum_subarray(arr: list, k: int) -> int:\n    window = sum(arr[:k])\n    result = window\n\n    for right in range(k, len(arr)):\n        # Process window\n        window += arr[right] - arr[right - k]\n\n        # Update result\n        result = max(result, window)\n\n    return result\n"})})})})]})}function x(s={}){const{wrapper:e}={...(0,r.R)(),...s.components};return e?(0,a.jsx)(e,{...s,children:(0,a.jsx)(c,{...s})}):c(s)}}}]);