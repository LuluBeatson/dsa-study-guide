"use strict";(self.webpackChunkdsa_study_guide=self.webpackChunkdsa_study_guide||[]).push([[565],{7621:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"language-guides/javascript","title":"JavaScript","description":"JavaScript quick reference guide","source":"@site/docs/language-guides/javascript.mdx","sourceDirName":"language-guides","slug":"/language-guides/javascript","permalink":"/docs/language-guides/javascript","draft":false,"unlisted":false,"editUrl":"https://github.com/LuluBeatson/dsa-study-guide/edit/main/docs/language-guides/javascript.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"JavaScript","description":"JavaScript quick reference guide"},"sidebar":"tutorialSidebar","previous":{"title":"Language Guides","permalink":"/docs/category/language-guides"},"next":{"title":"TypeScript","permalink":"/docs/language-guides/typescript"}}');var i=s(4848),t=s(8453),a=s(5537),c=s(9329);const l={sidebar_position:1,title:"JavaScript",description:"JavaScript quick reference guide"},o="JavaScript",d={},h=[{value:"Getting Started",id:"getting-started",level:2},{value:"Package Management",id:"package-management",level:3},{value:"Run File",id:"run-file",level:3},{value:"Run Project",id:"run-project",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Declarations",id:"declarations",level:3},{value:"Scopes",id:"scopes",level:4},{value:"Functions",id:"functions",level:3},{value:"Collections",id:"collections",level:2},{value:"Arrays",id:"arrays",level:3},{value:"Sets",id:"sets",level:3},{value:"Objects",id:"objects",level:3},{value:"Maps",id:"maps",level:3},{value:"Asynchronous Code",id:"asynchronous-code",level:2},{value:"Promises",id:"promises",level:3},{value:"Async/Await",id:"asyncawait",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Try/Catch",id:"trycatch",level:3},{value:"Throw",id:"throw",level:3},{value:"Assert",id:"assert",level:3},{value:"Type Checking",id:"type-checking",level:2},{value:"Checking class instances (supports inheritance)",id:"checking-class-instances-supports-inheritance",level:3},{value:"Checking exact type (ignores inheritance)",id:"checking-exact-type-ignores-inheritance",level:3},{value:"Checking primitives",id:"checking-primitives",level:3},{value:"JavaScript vs Python Type Checking",id:"javascript-vs-python-type-checking",level:3},{value:"Testing",id:"testing",level:2},{value:"Jest",id:"jest",level:3},{value:"Unit Testing",id:"unit-testing",level:4},{value:"Integration Testing",id:"integration-testing",level:4}];function u(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"javascript",children:"JavaScript"})}),"\n",(0,i.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsx)(n.h3,{id:"package-management",children:"Package Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm init -y\n# Creates a package.json file\n\n# Add a dependency\npnpm add foo\n\n# Add a dev dependency\npnpm add -D bar\n\n# Install all dependencies\npnpm install\n"})}),"\n",(0,i.jsx)(n.h3,{id:"run-file",children:"Run File"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"node myfile.js\n"})}),"\n",(0,i.jsx)(n.h3,{id:"run-project",children:"Run Project"}),"\n",(0,i.jsxs)(n.p,{children:["First, add a start script to your ",(0,i.jsx)(n.code,{children:"package.json"})," file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"scripts": {\n  "start": "node index.js"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Then, run the project."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm start\n"})}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.h3,{id:"declarations",children:"Declarations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"let"})," - mutable variable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"const"})," - immutable variable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"var"})," - old way to declare variables"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"scopes",children:"Scopes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"let"})," and ",(0,i.jsx)(n.code,{children:"const"})," are block scoped. A block is defined by curly braces ",(0,i.jsx)(n.code,{children:"{}"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"var"})," is function scoped"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Functions are first-class citizens"}),"\n",(0,i.jsx)(n.li,{children:"Can be assigned to variables, passed as arguments, and returned from other functions"}),"\n",(0,i.jsxs)(n.li,{children:["In function declarations and expressions, if ",(0,i.jsx)(n.code,{children:"return"})," is omitted, the function will return ",(0,i.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["In arrow functions, ",(0,i.jsx)(n.code,{children:"return"})," can be ",(0,i.jsx)(n.em,{children:"implicitly"})," returned if","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the body is a single expression"}),"\n",(0,i.jsx)(n.li,{children:"AND the function is written without curly braces"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Function declaration (explicit return)\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\n// Function expression (explicit return)\nconst greet = function(name) {\n  return `Hello, ${name}!`;\n};\n\n// Arrow function (implicit return)\nconst greet = (name) => `Hello, ${name}!`;\n\n// Arrow function (explicit return)\nconst greet = (name) => { return `Hello, ${name}!` };\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can have parameters with default values with ",(0,i.jsx)(n.code,{children:"="}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Default parameter\nfunction greet(name = 'World') {\n  return `Hello, ${name}!`;\n}\n\n// Handling optional parameters manually\nfunction greet(name) {\n  // Check if name is undefined\n  return `Hello, ${name || 'World'}!`;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"collections",children:"Collections"}),"\n",(0,i.jsx)(n.h3,{id:"arrays",children:"Arrays"}),"\n",(0,i.jsx)(n.p,{children:"Arrays are ordered lists of values"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const numbers = [1, 2, 3];\n\nnumbers[0] = 0; // Access/set by index\n\nnumbers.push(4);  // Append to end\nnumbers.pop();   // Remove from end\nnumbers.shift(); // Remove from beginning\nnumbers.unshift(0); // Prepend to beginning\n\n// Destructure array\nconst [first, second, third] = numbers;\n\n// Swap\n[first, second] = [second, first];\n\n// Spread operator\nconst newNumbers = [1, 2, ...numbers];\n"})}),"\n",(0,i.jsx)(n.p,{children:"There are many ways to loop through arrays."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Loop\nfor (const number of numbers) {\n  console.log(number);\n}\n// Loop with index\nfor (let i = 0; i < numbers.length; i++) {\n  console.log(numbers[i]);\n}\n\n// forEach\nnumbers.forEach(number => {\n  console.log(number);\n});\n// forEach with index\nnumbers.forEach((number, index) => {\n  console.log(number, index);\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Operations on arrays"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Map\nconst doubled = numbers.map(number => number * 2);\n// [2, 4, 6]\n\n// Filter\nconst evenNumbers = numbers.filter(number => number % 2 === 0);\n// [2, 4]\n\n// Reduce - accumulates\nconst sum = numbers.reduce((acc, number) => acc + number, 0);\n// 6\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sets",children:"Sets"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Sets are ordered collections of unique values"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const set = new Set();\nset.add('John');\nset.add('Jane');\nset.add('John');  // Duplicate, ignored\n\nset.has('John');  // true\n\nset.size;  // 2\n\nset.delete('Jane');\nset.clear();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Iterate over sets"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"for (const value of set) {\n  console.log(value);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"objects",children:"Objects"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Objects are unordered collections of key-value pairs"}),"\n",(0,i.jsx)(n.li,{children:"Keys are strings or symbols, and values can be any type"}),"\n",(0,i.jsx)(n.li,{children:"Use dot notation or bracket notation to access properties"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const person = {\n  name: 'John',\n  age: 30,\n};\n\n// Access properties\nperson.name;\nperson['name'];\n\n// Delete properties\ndelete person.age;\n"})}),"\n",(0,i.jsx)(n.p,{children:"Loop through object properties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Keys\nfor (const key in person) {\n  console.log(key, person[key]);\n}\n// Values\nfor (const value of Object.values(person)) {\n  console.log(value);\n}\n// Keys and values\nfor (const [key, value] of Object.entries(person)) {\n  console.log(key, value);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"maps",children:"Maps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Maps are ordered collections of key-value pairs"}),"\n",(0,i.jsx)(n.li,{children:"Keys can be any type"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const map = new Map();\nmap.set('name', 'John');\nmap.set('age', 30);\n\nmap.get('name');  // John\nmap.has('name');  // true\n\nmap.size;  // 2\n\nmap.delete('age');\nmap.clear();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"asynchronous-code",children:"Asynchronous Code"}),"\n",(0,i.jsx)(n.h3,{id:"promises",children:"Promises"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Creating a promise\nconst fetchData = new Promise((resolve, reject) => {\n  // Async operation\n  const success = true;\n  if (success) {\n    resolve('Data fetched successfully');\n  } else {\n    reject('Error fetching data');\n  }\n});\n\n// Using promises\nfetchData\n  .then(data => console.log(data))\n  .catch(error => console.error(error));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"asyncawait",children:"Async/Await"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Async function declaration\nasync function fetchUser(id) {\n  try {\n    const response = await fetch(`/api/users/${id}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    throw error;\n  }\n}\n\n// Using async functions\nfetchUser(123)\n  .then(user => console.log(user))\n  .catch(error => console.error(error));\n"})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.h3,{id:"trycatch",children:"Try/Catch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"try {\n    // Code that might throw an error\n} catch (error) {\n    // Code that runs if an error is thrown\n} finally {\n    // Code that runs after the try/catch block\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"throw",children:"Throw"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"throw"})," is equivalent to ",(0,i.jsx)(n.code,{children:"raise"})," in Python."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"throw new Error('Something went wrong');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"assert",children:"Assert"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Node.js\nconst assert = require('assert');\nassert(condition, 'Message');\n\n// Or in testing frameworks like Jest\nimport { expect } from '@jest/globals';\nexpect(condition).toBeTruthy();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"type-checking",children:"Type Checking"}),"\n",(0,i.jsx)(n.h3,{id:"checking-class-instances-supports-inheritance",children:"Checking class instances (supports inheritance)"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(c.A,{value:"javascript",label:"JavaScript",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class Animal {}\nclass Dog extends Animal {}\n\nconst d = new Dog();\nconsole.log(d instanceof Dog);    // true\nconsole.log(d instanceof Animal); // true\n"})})}),(0,i.jsx)(c.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Animal: pass\nclass Dog(Animal): pass\n\nd = Dog()\nprint(isinstance(d, Dog))    # True\nprint(isinstance(d, Animal)) # True\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"checking-exact-type-ignores-inheritance",children:"Checking exact type (ignores inheritance)"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(c.A,{value:"javascript",label:"JavaScript",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"console.log(Object.getPrototypeOf(d) === Dog.prototype);    // true\nconsole.log(Object.getPrototypeOf(d) === Animal.prototype); // false\n"})})}),(0,i.jsx)(c.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"print(type(d) is Dog)    # True\nprint(type(d) is Animal) # False\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"checking-primitives",children:"Checking primitives"}),"\n",(0,i.jsxs)(a.A,{children:[(0,i.jsx)(c.A,{value:"javascript",label:"JavaScript",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'let x = 42;\nconsole.log(typeof x === "number");  // true\n'})})}),(0,i.jsx)(c.A,{value:"python",label:"Python",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"x = 42\nprint(isinstance(x, int))    # True\nprint(type(x) is int)        # True\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"javascript-vs-python-type-checking",children:"JavaScript vs Python Type Checking"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Python's isinstance is more flexible (works on both classes and built-in types), whereas TypeScript's instanceof only works for class instances."}),"\n",(0,i.jsx)(n.li,{children:"TypeScript's typeof is only for primitives, whereas Python's type() works on any object."}),"\n",(0,i.jsx)(n.li,{children:"Python supports multiple types in isinstance(obj, (type1, type2)), but TypeScript requires multiple typeof checks."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.h3,{id:"jest",children:"Jest"}),"\n",(0,i.jsx)(n.p,{children:"If you\u2019re using Create React App (CRA), Jest and React Testing Library are already included. Otherwise, install the required dependencies:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev jest @testing-library/react @testing-library/jest-dom @testing-library/user-event\n"})}),"\n",(0,i.jsx)(n.h4,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'// src/components/Button.test.jsx\nimport { render, screen, fireEvent } from "@testing-library/react";\nimport Button from "./Button";\n\ntest("renders button with correct label", () => {\n  render(<Button label="Click Me" />);\n  expect(screen.getByText("Click Me")).toBeInTheDocument();\n});\n\ntest("calls onClick handler when clicked", () => {\n  const handleClick = jest.fn();  // Mock function\n  render(<Button label="Click Me" onClick={handleClick} />);\n  \n  fireEvent.click(screen.getByText("Click Me"));\n  \n  expect(handleClick).toHaveBeenCalledTimes(1);\n});\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm test\n"})}),"\n",(0,i.jsx)(n.h4,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'// src/components/Counter.test.jsx\nimport { render, screen, fireEvent } from "@testing-library/react";\nimport Counter from "./Counter";\n\ntest("increments counter when button is clicked", () => {\n  render(<Counter />);\n  \n  const button = screen.getByText("Increment");\n  fireEvent.click(button);\n  \n  expect(screen.getByText("Count: 1")).toBeInTheDocument();\n});\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);